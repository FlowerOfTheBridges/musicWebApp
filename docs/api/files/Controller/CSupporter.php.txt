<?php
require_once 'inc.php';

/**
 * La classe CSupporter implementa la funzionalità 'Supporta Musicista'. Le funzioni support/unsupport
 * permettono ad un utente di supportare/smettere di supportare un musicista, non prima di aver
 * fatto prendere nota all'utente delle informazioni sul supporto del musicista. 
 * @author gruppo2
 * @package Controller
 */
class CSupporter
{
    /**
     * La funzione support permette di supportare un musicista. L'utente, se confermerà la sua
     * scelta dopo aver visionato i parametri di supporto imposti dal musicista, verrà associato
     * al musicista attraverso un oggetto ESupporter, che salverà tale associazione nel database.
     * @param int $id l'identificativo dell'utente da seguire
     */
    static function support($id)
    {
        if ($_SERVER['REQUEST_METHOD'] == 'GET') // se il metodo e' get...
        {
            CSupporter::showSupportConfirmation($id);
        }
        else if ($_SERVER['REQUEST_METHOD'] == 'POST')
            CSupporter::makeSupport($id);
        else
            header('Location: HTTP/1.1 Invalid HTTP method detected');
    }
    
    /**
     * La funzione unsupport permette di terminare il supporto di un musicista. Se l'associazione tra
     * utente e musicista è effettivamente presente, verrà regolata attraverso un oggetto ESupporter, 
     * che rimuoverà tale associazione nel database.
     * @param int $id l'identificativo del musicista da non seguire
     */
    static function unsupport($id)
    {
        $vUser = new VUser();
        $user = CSession::getUserFromSession();
        
        if (! is_a($user, EGuest::class))
        { // se l'utente non e' un guest
            if (is_numeric($id))
            {
                $supportUser = FPersistantManager::getInstance()->load(EUser::class, $id);
                if ($supportUser)
                { // se l'utente esiste, si costruisce l'oggetto supporter
                    $supporter = new ESupporter();
                    $supporter->setArtist($supportUser);
                    $supporter->setSupport($user);
                    if ($supporter->isValid())
                    {
                        if ($supporter->exists())
                        { // se i due utenti si supportano, si rimuove la corrispondenza dal database
                            FPersistantManager::getInstance()->remove(ESupporter::class, $supporter->getArtist()->getId(), $supporter->getSupport()->getId());
                            header('Location: /deepmusic/user/profile/' . $supportUser->getId());
                        }
                        else
                            $vUser->showErrorPage($user, 'You are not supporting ' . $supportUser->getNickName() . '!');
                    }
                    else
                        $vUser->showErrorPage($user, 'You can\'t unsupport yourself!');
                }
            }
            else
                $vUser->showErrorPage($user, 'The URL is invalid!');
        }
        else
            $vUser->showErrorPage($user, 'You must be a DeepMusic\'s user to use the support function!');
    }
    
    private function makeSupport($id)
    {
        $vSupporter = new VSupporter();
        $user = CSession::getUserFromSession();
        
        if (! is_a($user, EGuest::class)) 
        { // se l'utente non e' guest
            if (is_numeric($id)) 
            { // se l'url contiene un id
                $supportUser = FPersistantManager::getInstance()->load(EUser::class, $id); // si carica l'utente
                if ($supportUser) // se l'utente esiste
                {
                    if ($vSupporter->validateChoice()) // se l'utente ha scelto di supportare il musicista
                    { // si costruisce l'oggetto supporter
                        $supporter = new ESupporter();
                        $supporter->setArtist($supportUser);
                        $supporter->setSupport($user);
                        if ($supporter->isValid()) { // se l'associazione e' valida
                            if (! $supporter->exists()) // se i due utenti non si supportano
                            { // salva l'associazione nel database
                                $supInfo = $supportUser->getSupportInfo();
                                
                                $supporter->makeExpirationDateFromPeriod($supInfo->getPeriod());
                                
                                FPersistantManager::getInstance()->store($supporter);
                                
                                header('Location: /deepmusic/user/profile/' . $supportUser->getId()); // redirect al profilo
                            } 
                            else
                                $vSupporter->showErrorPage($user, 'You already suppport ' . $supportUser->getNickName() . '!');
                        } 
                        else
                            $vSupporter->showErrorPage($user, 'You can\'t support yourself!');
                    } 
                    else
                        header('Location: /deepmusic/user/profile/' . $supportUser->getId() ); // redirect al profilo
                }
            } 
            else
                $vSupporter->showErrorPage($user, 'The URL is invalid!');
        } 
        else
            $vSupporter->showErrorPage($user, 'You must be a DeepMusic\'s user to use the support function!');
    }
    
    private function showSupportConfirmation($id)
    
    {
        $vSupporter = new VSupporter();
        $user = CSession::getUserFromSession();
        if(get_class($user)!= EGuest::class)
        {
            if(is_numeric($id))
            {
                $musician= FPersistantManager::getInstance()->load(EUser::class, $id);
                if(is_a($musician, EMusician::class))
                    $vSupporter->showSupportConf($user, $musician);
                else 
                    $vSupporter->showErrorPage($user, '');
                
            }
            else 
                $vSupporter->showErrorPage($user, '');
        }
        else 
            $vSupporter->showErrorPage($user, '');
    }
}


